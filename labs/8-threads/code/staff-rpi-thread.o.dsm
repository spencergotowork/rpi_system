;;
;; This file was generated by the Retargetable Decompiler
;; Website: https://retdec.com
;;
;; Decompilation date: 2023-01-11 19:51:12
;; Architecture: arm
;;

;;
;; Code Segment
;;

; section: .text
; function: tid at 0x0 -- 0x8
0x0:     08 00 90 e5   	ldr r0, [r0, #8]
0x4:     1e ff 2f e1   	bx lr
; function: Q_append at 0x8 -- 0x40
0x8:     00 30 a0 e3   	mov r3, #0
0xc:     04 30 81 e5   	str r3, [r1, #4]
0x10:    08 30 90 e5   	ldr r3, [r0, #8]
0x14:    01 30 83 e2   	add r3, r3, #1
0x18:    08 30 80 e5   	str r3, [r0, #8]
0x1c:    04 30 90 e5   	ldr r3, [r0, #4]
0x20:    00 00 53 e3   	cmp r3, #0
0x24:    02 00 00 0a   	beq #0x34 <Q_append+0x2c>
0x28:    04 10 83 e5   	str r1, [r3, #4]
0x2c:    04 10 80 e5   	str r1, [r0, #4]
0x30:    1e ff 2f e1   	bx lr
0x34:    04 10 80 e5   	str r1, [r0, #4]
0x38:    00 10 80 e5   	str r1, [r0]
0x3c:    1e ff 2f e1   	bx lr
; function: Q_empty at 0x40 -- 0xc8
0x40:    00 30 90 e5   	ldr r3, [r0]
0x44:    00 00 53 e3   	cmp r3, #0
0x48:    01 00 00 0a   	beq #0x54 <Q_empty+0x14>
0x4c:    00 00 a0 e3   	mov r0, #0
0x50:    1e ff 2f e1   	bx lr
0x54:    10 40 2d e9   	push {r4, lr}
0x58:    08 d0 4d e2   	sub sp, sp, #8
0x5c:    00 40 a0 e1   	mov r4, r0
0x60:    e6 ff ff eb   	bl #0
0x64:    00 00 50 e3   	cmp r0, #0
0x68:    05 00 00 1a   	bne #0x84 <Q_empty+0x44>
0x6c:    04 30 94 e5   	ldr r3, [r4, #4]
0x70:    00 00 53 e3   	cmp r3, #0
0x74:    0a 00 00 1a   	bne #0xa4 <Q_empty+0x64>
0x78:    01 00 a0 e3   	mov r0, #1
0x7c:    08 d0 8d e2   	add sp, sp, #8
0x80:    10 80 bd e8   	pop {r4, pc}
0x84:    3c 30 9f e5   	ldr r3, [pc, #0x3c]
0x88:    00 30 8d e5   	str r3, [sp]
0x8c:    15 30 a0 e3   	mov r3, #0x15
0x90:    34 20 9f e5   	ldr r2, [pc, #0x34]
0x94:    34 10 9f e5   	ldr r1, [pc, #0x34]
0x98:    34 00 9f e5   	ldr r0, [pc, #0x34]
0x9c:    44 02 00 eb   	bl #0x9b4 <printk>
0xa0:    44 02 00 eb   	bl #0x9b8 <clean_reboot>
0xa4:    44 02 00 eb   	bl #0x9bc <rpi_reset_putc>
0xa8:    28 30 9f e5   	ldr r3, [pc, #0x28]
0xac:    00 30 8d e5   	str r3, [sp]
0xb0:    16 30 a0 e3   	mov r3, #0x16
0xb4:    10 20 9f e5   	ldr r2, [pc, #0x10]
0xb8:    10 10 9f e5   	ldr r1, [pc, #0x10]
0xbc:    18 00 9f e5   	ldr r0, [pc, #0x18]
0xc0:    3b 02 00 eb   	bl #0x9b4 <printk>
0xc4:    3b 02 00 eb   	bl #0x9b8 <clean_reboot>
; data inside code section at 0xc8 -- 0xe0
0xc8:    2c 06 00 00 48 09 00 00  e8 05 00 00 18 06 00 00   |,...H...........|
0xd8:    64 06 00 00 3c 06 00 00                            |d...<...        |
; function: Q_pop at 0xe0 -- 0x17c
0xe0:    10 40 2d e9   	push {r4, lr}
0xe4:    08 d0 4d e2   	sub sp, sp, #8
0xe8:    00 00 50 e3   	cmp r0, #0
0xec:    0c 00 00 0a   	beq #0x124 <Q_pop+0x44>
0xf0:    00 40 90 e5   	ldr r4, [r0]
0xf4:    00 00 54 e3   	cmp r4, #0
0xf8:    12 00 00 0a   	beq #0x148 <Q_pop+0x68>
0xfc:    08 30 90 e5   	ldr r3, [r0, #8]
0x100:   01 30 43 e2   	sub r3, r3, #1
0x104:   08 30 80 e5   	str r3, [r0, #8]
0x108:   04 30 94 e5   	ldr r3, [r4, #4]
0x10c:   00 30 80 e5   	str r3, [r0]
0x110:   00 00 53 e3   	cmp r3, #0
0x114:   16 00 00 0a   	beq #0x174 <Q_pop+0x94>
0x118:   04 00 a0 e1   	mov r0, r4
0x11c:   08 d0 8d e2   	add sp, sp, #8
0x120:   10 80 bd e8   	pop {r4, pc}
0x124:   24 02 00 eb   	bl #0x9bc <rpi_reset_putc>
0x128:   4c 30 9f e5   	ldr r3, [pc, #0x4c]
0x12c:   00 30 8d e5   	str r3, [sp]
0x130:   1c 30 a0 e3   	mov r3, #0x1c
0x134:   44 20 9f e5   	ldr r2, [pc, #0x44]
0x138:   44 10 9f e5   	ldr r1, [pc, #0x44]
0x13c:   44 00 9f e5   	ldr r0, [pc, #0x44]
0x140:   1b 02 00 eb   	bl #0x9b4 <printk>
0x144:   1b 02 00 eb   	bl #0x9b8 <clean_reboot>
0x148:   bc ff ff eb   	bl #0x40 <Q_empty>
0x14c:   00 00 50 e3   	cmp r0, #0
0x150:   f0 ff ff 1a   	bne #0x118 <Q_pop+0x38>
0x154:   30 30 9f e5   	ldr r3, [pc, #0x30]
0x158:   00 30 8d e5   	str r3, [sp]
0x15c:   20 30 a0 e3   	mov r3, #0x20
0x160:   18 20 9f e5   	ldr r2, [pc, #0x18]
0x164:   18 10 9f e5   	ldr r1, [pc, #0x18]
0x168:   20 00 9f e5   	ldr r0, [pc, #0x20]
0x16c:   10 02 00 eb   	bl #0x9b4 <printk>
0x170:   10 02 00 eb   	bl #0x9b8 <clean_reboot>
0x174:   04 30 80 e5   	str r3, [r0, #4]
0x178:   e6 ff ff ea   	b #0x118 <Q_pop+0x38>
; data inside code section at 0x17c -- 0x194
0x17c:   98 06 00 00 50 09 00 00  e8 05 00 00 70 06 00 00   |....P.......p...|
0x18c:   9c 06 00 00 18 06 00 00                            |........        |
; function: th_alloc at 0x194 -- 0x214
0x194:   04 e0 2d e5   	str lr, [sp, #-4]!
0x198:   0c d0 4d e2   	sub sp, sp, #0xc
0x19c:   70 00 9f e5   	ldr r0, [pc, #0x70]
0x1a0:   ce ff ff eb   	bl #0xe0 <Q_pop>
0x1a4:   00 00 50 e3   	cmp r0, #0
0x1a8:   08 00 00 0a   	beq #0x1d0 <th_alloc+0x3c>
0x1ac:   07 00 10 e3   	tst r0, #7
0x1b0:   0e 00 00 1a   	bne #0x1f0 <th_alloc+0x5c>
0x1b4:   5c 20 9f e5   	ldr r2, [pc, #0x5c]
0x1b8:   00 30 92 e5   	ldr r3, [r2]
0x1bc:   01 10 83 e2   	add r1, r3, #1
0x1c0:   00 10 82 e5   	str r1, [r2]
0x1c4:   08 30 80 e5   	str r3, [r0, #8]
0x1c8:   0c d0 8d e2   	add sp, sp, #0xc
0x1cc:   04 f0 9d e4   	pop {pc}
0x1d0:   08 10 a0 e3   	mov r1, #8
0x1d4:   40 00 9f e5   	ldr r0, [pc, #0x40]
0x1d8:   f8 01 00 eb   	bl #0x9c0 <kmalloc_aligned>
0x1dc:   30 20 9f e5   	ldr r2, [pc, #0x30]
0x1e0:   0c 30 92 e5   	ldr r3, [r2, #0xc]
0x1e4:   01 30 83 e2   	add r3, r3, #1
0x1e8:   0c 30 82 e5   	str r3, [r2, #0xc]
0x1ec:   ee ff ff ea   	b #0x1ac <th_alloc+0x18>
0x1f0:   f1 01 00 eb   	bl #0x9bc <rpi_reset_putc>
0x1f4:   24 30 9f e5   	ldr r3, [pc, #0x24]
0x1f8:   00 30 8d e5   	str r3, [sp]
0x1fc:   31 30 a0 e3   	mov r3, #0x31
0x200:   1c 20 9f e5   	ldr r2, [pc, #0x1c]
0x204:   1c 10 9f e5   	ldr r1, [pc, #0x1c]
0x208:   1c 00 9f e5   	ldr r0, [pc, #0x1c]
0x20c:   e8 01 00 eb   	bl #0x9b4 <printk>
0x210:   e8 01 00 eb   	bl #0x9b8 <clean_reboot>
; data inside code section at 0x214 -- 0x230
0x214:   e8 05 00 00 e4 05 00 00  18 20 00 00 f4 06 00 00   |......... ......|
0x224:   58 09 00 00 a8 06 00 00  b8 06 00 00               |X...........    |
; function: rpi_cur_thread at 0x230 -- 0x23c
0x230:   04 30 9f e5   	ldr r3, [pc, #4]
0x234:   10 00 93 e5   	ldr r0, [r3, #0x10]
0x238:   1e ff 2f e1   	bx lr
; data inside code section at 0x23c -- 0x240
0x23c:   e8 05 00 00                                        |....            |
; function: rpi_fork at 0x240 -- 0x2a4
0x240:   70 40 2d e9   	push {r4, r5, r6, lr}
0x244:   08 d0 4d e2   	sub sp, sp, #8
0x248:   00 50 a0 e1   	mov r5, r0
0x24c:   01 60 a0 e1   	mov r6, r1
0x250:   cf ff ff eb   	bl #0x194 <th_alloc>
0x254:   00 40 a0 e1   	mov r4, r0
0x258:   7f 2d 80 e2   	add r2, r0, #0x1fc0
0x25c:   30 30 82 e2   	add r3, r2, #0x30
0x260:   00 30 80 e5   	str r3, [r0]
0x264:   30 60 82 e5   	str r6, [r2, #0x30]
0x268:   34 50 82 e5   	str r5, [r2, #0x34]
0x26c:   30 20 9f e5   	ldr r2, [pc, #0x30]
0x270:   20 20 83 e5   	str r2, [r3, #0x20]
0x274:   08 10 90 e5   	ldr r1, [r0, #8]
0x278:   00 30 8d e5   	str r3, [sp]
0x27c:   06 30 a0 e1   	mov r3, r6
0x280:   05 20 a0 e1   	mov r2, r5
0x284:   1c 00 9f e5   	ldr r0, [pc, #0x1c]
0x288:   c9 01 00 eb   	bl #0x9b4 <printk>
0x28c:   04 10 a0 e1   	mov r1, r4
0x290:   14 00 9f e5   	ldr r0, [pc, #0x14]
0x294:   5b ff ff eb   	bl #8 <Q_append>
0x298:   04 00 a0 e1   	mov r0, r4
0x29c:   08 d0 8d e2   	add sp, sp, #8
0x2a0:   70 80 bd e8   	pop {r4, r5, r6, pc}
; data inside code section at 0x2a4 -- 0x2b0
0x2a4:   c4 09 00 00 1c 07 00 00  fc 05 00 00               |............    |
; function: rpi_exit at 0x2b0 -- 0x31c
0x2b0:   70 40 2d e9   	push {r4, r5, r6, lr}
0x2b4:   60 40 9f e5   	ldr r4, [pc, #0x60]
0x2b8:   10 50 94 e5   	ldr r5, [r4, #0x10]
0x2bc:   14 00 84 e2   	add r0, r4, #0x14
0x2c0:   86 ff ff eb   	bl #0xe0 <Q_pop>
0x2c4:   10 00 84 e5   	str r0, [r4, #0x10]
0x2c8:   00 00 50 e3   	cmp r0, #0
0x2cc:   0d 00 00 0a   	beq #0x308 <rpi_exit+0x58>
0x2d0:   44 40 9f e5   	ldr r4, [pc, #0x44]
0x2d4:   05 10 a0 e1   	mov r1, r5
0x2d8:   04 00 a0 e1   	mov r0, r4
0x2dc:   49 ff ff eb   	bl #8 <Q_append>
0x2e0:   10 30 94 e5   	ldr r3, [r4, #0x10]
0x2e4:   00 10 93 e5   	ldr r1, [r3]
0x2e8:   05 00 a0 e1   	mov r0, r5
0x2ec:   b5 01 00 eb   	bl #0x9c8 <rpi_cswitch>
0x2f0:   87 30 a0 e3   	mov r3, #0x87
0x2f4:   24 20 9f e5   	ldr r2, [pc, #0x24]
0x2f8:   24 10 9f e5   	ldr r1, [pc, #0x24]
0x2fc:   24 00 9f e5   	ldr r0, [pc, #0x24]
0x300:   ab 01 00 eb   	bl #0x9b4 <printk>
0x304:   ab 01 00 eb   	bl #0x9b8 <clean_reboot>
0x308:   1c 00 9f e5   	ldr r0, [pc, #0x1c]
0x30c:   a8 01 00 eb   	bl #0x9b4 <printk>
0x310:   20 20 94 e5   	ldr r2, [r4, #0x20]
0x314:   10 20 84 e5   	str r2, [r4, #0x10]
0x318:   ec ff ff ea   	b #0x2d0 <rpi_exit+0x20>
; data inside code section at 0x31c -- 0x330
0x31c:   e8 05 00 00 64 09 00 00  a8 06 00 00 90 07 00 00   |....d...........|
0x32c:   54 07 00 00                                        |T...            |
; function: rpi_yield at 0x330 -- 0x384
0x330:   70 40 2d e9   	push {r4, r5, r6, lr}
0x334:   48 00 9f e5   	ldr r0, [pc, #0x48]
0x338:   10 50 90 e5   	ldr r5, [r0, #0x10]
0x33c:   14 00 80 e2   	add r0, r0, #0x14
0x340:   66 ff ff eb   	bl #0xe0 <Q_pop>
0x344:   00 40 50 e2   	subs r4, r0, #0
0x348:   70 80 bd 08   	popeq {r4, r5, r6, pc}
0x34c:   30 60 9f e5   	ldr r6, [pc, #0x30]
0x350:   05 10 a0 e1   	mov r1, r5
0x354:   14 00 86 e2   	add r0, r6, #0x14
0x358:   2a ff ff eb   	bl #8 <Q_append>
0x35c:   10 40 86 e5   	str r4, [r6, #0x10]
0x360:   08 20 94 e5   	ldr r2, [r4, #8]
0x364:   08 10 95 e5   	ldr r1, [r5, #8]
0x368:   18 00 9f e5   	ldr r0, [pc, #0x18]
0x36c:   90 01 00 eb   	bl #0x9b4 <printk>
0x370:   10 30 96 e5   	ldr r3, [r6, #0x10]
0x374:   00 10 93 e5   	ldr r1, [r3]
0x378:   05 00 a0 e1   	mov r0, r5
0x37c:   91 01 00 eb   	bl #0x9c8 <rpi_cswitch>
0x380:   70 80 bd e8   	pop {r4, r5, r6, pc}
; data inside code section at 0x384 -- 0x38c
0x384:   e8 05 00 00 b0 07 00 00                            |........        |
; function: rpi_thread_start at 0x38c -- 0x3d4
0x38c:   10 40 2d e9   	push {r4, lr}
0x390:   7f ff ff eb   	bl #0x194 <th_alloc>
0x394:   00 10 a0 e1   	mov r1, r0
0x398:   34 40 9f e5   	ldr r4, [pc, #0x34]
0x39c:   20 00 84 e5   	str r0, [r4, #0x20]
0x3a0:   30 00 9f e5   	ldr r0, [pc, #0x30]
0x3a4:   82 01 00 eb   	bl #0x9b4 <printk>
0x3a8:   14 00 84 e2   	add r0, r4, #0x14
0x3ac:   4b ff ff eb   	bl #0xe0 <Q_pop>
0x3b0:   10 00 84 e5   	str r0, [r4, #0x10]
0x3b4:   00 00 50 e3   	cmp r0, #0
0x3b8:   02 00 00 0a   	beq #0x3c8 <rpi_thread_start+0x3c>
0x3bc:   00 10 90 e5   	ldr r1, [r0]
0x3c0:   20 00 94 e5   	ldr r0, [r4, #0x20]
0x3c4:   7f 01 00 eb   	bl #0x9c8 <rpi_cswitch>
0x3c8:   0c 00 9f e5   	ldr r0, [pc, #0xc]
0x3cc:   78 01 00 eb   	bl #0x9b4 <printk>
0x3d0:   10 80 bd e8   	pop {r4, pc}
; data inside code section at 0x3d4 -- 0x3e0
0x3d4:   e8 05 00 00 dc 07 00 00  fc 07 00 00               |............    |
; function: rpi_internal_check at 0x3e0 -- 0x470
0x3e0:   30 40 2d e9   	push {r4, r5, lr}
0x3e4:   14 d0 4d e2   	sub sp, sp, #0x14
0x3e8:   80 50 9f e5   	ldr r5, [pc, #0x80]
0x3ec:   05 00 a0 e1   	mov r0, r5
0x3f0:   02 ff ff eb   	bl #0
0x3f4:   00 40 a0 e1   	mov r4, r0
0x3f8:   14 00 85 e2   	add r0, r5, #0x14
0x3fc:   ff fe ff eb   	bl #0
0x400:   00 20 84 e0   	add r2, r4, r0
0x404:   0c 30 95 e5   	ldr r3, [r5, #0xc]
0x408:   02 00 53 e1   	cmp r3, r2
0x40c:   07 00 00 1a   	bne #0x430 <rpi_internal_check+0x50>
0x410:   5c 00 9f e5   	ldr r0, [pc, #0x5c]
0x414:   09 ff ff eb   	bl #0x40 <Q_empty>
0x418:   00 00 50 e3   	cmp r0, #0
0x41c:   0d 00 00 0a   	beq #0x458 <rpi_internal_check+0x78>
0x420:   50 00 9f e5   	ldr r0, [pc, #0x50]
0x424:   62 01 00 eb   	bl #0x9b4 <printk>
0x428:   14 d0 8d e2   	add sp, sp, #0x14
0x42c:   30 80 bd e8   	pop {r4, r5, pc}
0x430:   0c 00 8d e5   	str r0, [sp, #0xc]
0x434:   08 40 8d e5   	str r4, [sp, #8]
0x438:   04 20 8d e5   	str r2, [sp, #4]
0x43c:   00 30 8d e5   	str r3, [sp]
0x440:   d4 30 a0 e3   	mov r3, #0xd4
0x444:   30 20 9f e5   	ldr r2, [pc, #0x30]
0x448:   30 10 9f e5   	ldr r1, [pc, #0x30]
0x44c:   30 00 9f e5   	ldr r0, [pc, #0x30]
0x450:   57 01 00 eb   	bl #0x9b4 <printk>
0x454:   57 01 00 eb   	bl #0x9b8 <clean_reboot>
0x458:   db 30 a0 e3   	mov r3, #0xdb
0x45c:   18 20 9f e5   	ldr r2, [pc, #0x18]
0x460:   18 10 9f e5   	ldr r1, [pc, #0x18]
0x464:   1c 00 9f e5   	ldr r0, [pc, #0x1c]
0x468:   51 01 00 eb   	bl #0x9b4 <printk>
0x46c:   51 01 00 eb   	bl #0x9b8 <clean_reboot>
; data inside code section at 0x470 -- 0x48c
0x470:   e8 05 00 00 fc 05 00 00  ac 08 00 00 70 09 00 00   |............p...|
0x480:   a8 06 00 00 28 08 00 00  80 08 00 00               |....(.......    |
; function: rpi_stack_check at 0x48c -- 0x4a8
0x48c:   10 40 2d e9   	push {r4, lr}
0x490:   e3 30 a0 e3   	mov r3, #0xe3
0x494:   0c 20 9f e5   	ldr r2, [pc, #0xc]
0x498:   0c 10 9f e5   	ldr r1, [pc, #0xc]
0x49c:   0c 00 9f e5   	ldr r0, [pc, #0xc]
0x4a0:   43 01 00 eb   	bl #0x9b4 <printk>
0x4a4:   43 01 00 eb   	bl #0x9b8 <clean_reboot>
; data inside code section at 0x4a8 -- 0x4b4
0x4a8:   84 09 00 00 a8 06 00 00  80 08 00 00               |............    |
; function: rpi_print_regs at 0x4b4 -- 0x590
0x4b4:   30 40 2d e9   	push {r4, r5, lr}
0x4b8:   0c d0 4d e2   	sub sp, sp, #0xc
0x4bc:   00 50 a0 e1   	mov r5, r0
0x4c0:   c8 40 9f e5   	ldr r4, [pc, #0xc8]
0x4c4:   10 30 94 e5   	ldr r3, [r4, #0x10]
0x4c8:   08 10 93 e5   	ldr r1, [r3, #8]
0x4cc:   c0 00 9f e5   	ldr r0, [pc, #0xc0]
0x4d0:   37 01 00 eb   	bl #0x9b4 <printk>
0x4d4:   05 10 a0 e1   	mov r1, r5
0x4d8:   b8 00 9f e5   	ldr r0, [pc, #0xb8]
0x4dc:   34 01 00 eb   	bl #0x9b4 <printk>
0x4e0:   10 10 94 e5   	ldr r1, [r4, #0x10]
0x4e4:   02 1a 81 e2   	add r1, r1, #0x2000
0x4e8:   18 10 81 e2   	add r1, r1, #0x18
0x4ec:   a8 00 9f e5   	ldr r0, [pc, #0xa8]
0x4f0:   2f 01 00 eb   	bl #0x9b4 <printk>
0x4f4:   10 30 94 e5   	ldr r3, [r4, #0x10]
0x4f8:   02 2a 83 e2   	add r2, r3, #0x2000
0x4fc:   18 20 82 e2   	add r2, r2, #0x18
0x500:   05 00 52 e1   	cmp r2, r5
0x504:   04 00 00 9a   	bls #0x51c <rpi_print_regs+0x68>
0x508:   18 30 83 e2   	add r3, r3, #0x18
0x50c:   05 00 53 e1   	cmp r3, r5
0x510:   09 00 00 8a   	bhi #0x53c <rpi_print_regs+0x88>
0x514:   00 40 a0 e3   	mov r4, #0
0x518:   15 00 00 ea   	b #0x574 <rpi_print_regs+0xc0>
0x51c:   7c 30 9f e5   	ldr r3, [pc, #0x7c]
0x520:   00 30 8d e5   	str r3, [sp]
0x524:   f2 30 a0 e3   	mov r3, #0xf2
0x528:   74 20 9f e5   	ldr r2, [pc, #0x74]
0x52c:   74 10 9f e5   	ldr r1, [pc, #0x74]
0x530:   74 00 9f e5   	ldr r0, [pc, #0x74]
0x534:   1e 01 00 eb   	bl #0x9b4 <printk>
0x538:   1e 01 00 eb   	bl #0x9b8 <clean_reboot>
0x53c:   6c 30 9f e5   	ldr r3, [pc, #0x6c]
0x540:   00 30 8d e5   	str r3, [sp]
0x544:   f3 30 a0 e3   	mov r3, #0xf3
0x548:   54 20 9f e5   	ldr r2, [pc, #0x54]
0x54c:   54 10 9f e5   	ldr r1, [pc, #0x54]
0x550:   54 00 9f e5   	ldr r0, [pc, #0x54]
0x554:   16 01 00 eb   	bl #0x9b4 <printk>
0x558:   16 01 00 eb   	bl #0x9b8 <clean_reboot>
0x55c:   0e 20 a0 e3   	mov r2, #0xe
0x560:   04 31 95 e7   	ldr r3, [r5, r4, lsl #2]
0x564:   04 10 a0 e1   	mov r1, r4
0x568:   44 00 9f e5   	ldr r0, [pc, #0x44]
0x56c:   10 01 00 eb   	bl #0x9b4 <printk>
0x570:   01 40 84 e2   	add r4, r4, #1
0x574:   08 00 54 e3   	cmp r4, #8
0x578:   03 00 00 8a   	bhi #0x58c <rpi_print_regs+0xd8>
0x57c:   08 00 54 e3   	cmp r4, #8
0x580:   f5 ff ff 0a   	beq #0x55c <rpi_print_regs+0xa8>
0x584:   04 20 84 e2   	add r2, r4, #4
0x588:   f4 ff ff ea   	b #0x560 <rpi_print_regs+0xac>
0x58c:   09 01 00 eb   	bl #0x9b8 <clean_reboot>
; data inside code section at 0x590 -- 0x5b8
0x590:   e8 05 00 00 cc 08 00 00  dc 08 00 00 e4 08 00 00   |................|
0x5a0:   f0 08 00 00 94 09 00 00  a8 06 00 00 18 06 00 00   |................|
0x5b0:   1c 09 00 00 38 09 00 00                            |....8...        |
; function: rpi_exact_sleep at 0x5b8 -- 0x5d4
0x5b8:   10 40 2d e9   	push {r4, lr}
0x5bc:   10 30 9f e5   	ldr r3, [pc, #0x10]
0x5c0:   10 20 9f e5   	ldr r2, [pc, #0x10]
0x5c4:   10 10 9f e5   	ldr r1, [pc, #0x10]
0x5c8:   10 00 9f e5   	ldr r0, [pc, #0x10]
0x5cc:   f8 00 00 eb   	bl #0x9b4 <printk>
0x5d0:   f8 00 00 eb   	bl #0x9b8 <clean_reboot>
; data inside code section at 0x5d4 -- 0x5e4
0x5d4:   09 01 00 00 a4 09 00 00  a8 06 00 00 80 08 00 00   |................|

;;
;; Data Segment
;;

; section: .data
0x5e4:   01 00 00 00                                        |....            |
0x5e8:   2f 68 6f 6d 65 2f 65 6e  67 6c 65 72 2f 63 6c 61   |/home/engler/cla|   "/home/engler/class/cs140e-22win//libpi/libc/Q.h"
0x5f8:   73 73 2f 63 73 31 34 30  65 2d 32 32 77 69 6e 2f   |ss/cs140e-22win/|
0x608:   2f 6c 69 62 70 69 2f 6c  69 62 63 2f 51 2e 68 00   |/libpi/libc/Q.h.|
; section: .rodata.str1.4
0x5e8:   2f 68 6f 6d 65 2f 65 6e  67 6c 65 72 2f 63 6c 61   |/home/engler/cla|   "/home/engler/class/cs140e-22win//libpi/libc/Q.h"
0x5f8:   73 73 2f 63 73 31 34 30  65 2d 32 32 77 69 6e 2f   |ss/cs140e-22win/|
0x608:   2f 6c 69 62 70 69 2f 6c  69 62 63 2f 51 2e 68 00   |/libpi/libc/Q.h.|
0x618:   50 41 4e 49 43 3a 25 73  3a 25 73 3a 25 64 3a 25   |PANIC:%s:%s:%d:%|   "PANIC:%s:%s:%d:%s\n"
0x628:   73 0a 00                                           |s..             |
0x62b:   00                                                 |.               |
0x62c:   51 5f 6e 65 6c 65 6d 28  71 29 20 3d 3d 20 30 00   |Q_nelem(q) == 0.|   "Q_nelem(q) == 0"
0x63c:   45 52 52 4f 52 3a 25 73  3a 25 73 3a 25 64 3a 20   |ERROR:%s:%s:%d: |   "ERROR:%s:%s:%d: FALSE(<%s>): invalid Q\n"
0x64c:   46 41 4c 53 45 28 3c 25  73 3e 29 3a 20 69 6e 76   |FALSE(<%s>): inv|
0x65c:   61 6c 69 64 20 51 0a 00                            |alid Q..        |
0x664:   21 71 2d 3e 74 61 69 6c  00                        |!q->tail.       |   "!q->tail"
0x66d:   00 00 00                                           |...             |
0x670:   45 52 52 4f 52 3a 25 73  3a 25 73 3a 25 64 3a 20   |ERROR:%s:%s:%d: |   "ERROR:%s:%s:%d: FALSE(<%s>): bad input\n"
0x680:   46 41 4c 53 45 28 3c 25  73 3e 29 3a 20 62 61 64   |FALSE(<%s>): bad|
0x690:   20 69 6e 70 75 74 0a 00                            | input..        |
0x698:   71 00 00 00                                        |q...            |
0x69c:   51 5f 65 6d 70 74 79 28  71 29 00                  |Q_empty(q).     |   "Q_empty(q)"
0x6a7:   00                                                 |.               |
0x6a8:   72 70 69 2d 74 68 72 65  61 64 2e 63 00            |rpi-thread.c.   |   "rpi-thread.c"
0x6b5:   00 00 00                                           |...             |
0x6b8:   45 52 52 4f 52 3a 25 73  3a 25 73 3a 25 64 3a 20   |ERROR:%s:%s:%d: |   "ERROR:%s:%s:%d: FALSE(<%s>): stack must be 8-byte aligned!\n"
0x6c8:   46 41 4c 53 45 28 3c 25  73 3e 29 3a 20 73 74 61   |FALSE(<%s>): sta|
0x6d8:   63 6b 20 6d 75 73 74 20  62 65 20 38 2d 62 79 74   |ck must be 8-byt|
0x6e8:   65 20 61 6c 69 67 6e 65  64 21 0a 00               |e aligned!..    |
0x6f4:   28 28 28 75 6e 73 69 67  6e 65 64 29 28 26 74 2d   |(((unsigned)(&t-|   "(((unsigned)(&t->stack[0]))%(8) == 0)"
0x704:   3e 73 74 61 63 6b 5b 30  5d 29 29 25 28 38 29 20   |>stack[0]))%(8) |
0x714:   3d 3d 20 30 29 00                                  |== 0).          |
0x71a:   00 00                                              |..              |
0x71c:   54 48 52 45 41 44 3a 20  72 70 69 5f 66 6f 72 6b   |THREAD: rpi_fork|   "THREAD: rpi_fork: tid=%d, code=%p, arg=%x, saved_sp=%p\n"
0x72c:   3a 20 74 69 64 3d 25 64  2c 20 63 6f 64 65 3d 25   |: tid=%d, code=%|
0x73c:   70 2c 20 61 72 67 3d 25  78 2c 20 73 61 76 65 64   |p, arg=%x, saved|
0x74c:   5f 73 70 3d 25 70 0a 00                            |_sp=%p..        |
0x754:   54 48 52 45 41 44 3a 20  72 70 69 5f 65 78 69 74   |THREAD: rpi_exit|   "THREAD: rpi_exit: done running threads, back to scheduler\n"
0x764:   3a 20 64 6f 6e 65 20 72  75 6e 6e 69 6e 67 20 74   |: done running t|
0x774:   68 72 65 61 64 73 2c 20  62 61 63 6b 20 74 6f 20   |hreads, back to |
0x784:   73 63 68 65 64 75 6c 65  72 0a 00                  |scheduler..     |
0x78f:   00                                                 |.               |
0x790:   50 41 4e 49 43 3a 25 73  3a 25 73 3a 25 64 3a 6e   |PANIC:%s:%s:%d:n|   "PANIC:%s:%s:%d:not reached!!\n\n"
0x7a0:   6f 74 20 72 65 61 63 68  65 64 21 21 0a 0a 00      |ot reached!!... |
0x7af:   00                                                 |.               |
0x7b0:   54 48 52 45 41 44 3a 20  72 70 69 5f 79 69 65 6c   |THREAD: rpi_yiel|   "THREAD: rpi_yield: switching from %d %d\n"
0x7c0:   64 3a 20 73 77 69 74 63  68 69 6e 67 20 66 72 6f   |d: switching fro|
0x7d0:   6d 20 25 64 20 25 64 0a  00                        |m %d %d..       |
0x7d9:   00 00 00                                           |...             |
0x7dc:   54 48 52 45 41 44 3a 20  73 63 68 65 64 75 6c 65   |THREAD: schedule|   "THREAD: scheduler thread=%p\n"
0x7ec:   72 20 74 68 72 65 61 64  3d 25 70 0a 00            |r thread=%p..   |
0x7f9:   00 00 00                                           |...             |
0x7fc:   54 48 52 45 41 44 3a 20  64 6f 6e 65 20 77 69 74   |THREAD: done wit|   "THREAD: done with all threads, returning\n"
0x80c:   68 20 61 6c 6c 20 74 68  72 65 61 64 73 2c 20 72   |h all threads, r|
0x81c:   65 74 75 72 6e 69 6e 67  0a 00                     |eturning..      |
0x826:   00 00                                              |..              |
0x828:   50 41 4e 49 43 3a 25 73  3a 25 73 3a 25 64 3a 73   |PANIC:%s:%s:%d:s|   "PANIC:%s:%s:%d:storage leak: should have %d free blocks, have %d (runq=%d, freeq=%d)\n\n"
0x838:   74 6f 72 61 67 65 20 6c  65 61 6b 3a 20 73 68 6f   |torage leak: sho|
0x848:   75 6c 64 20 68 61 76 65  20 25 64 20 66 72 65 65   |uld have %d free|
0x858:   20 62 6c 6f 63 6b 73 2c  20 68 61 76 65 20 25 64   | blocks, have %d|
0x868:   20 28 72 75 6e 71 3d 25  64 2c 20 66 72 65 65 71   | (runq=%d, freeq|
0x878:   3d 25 64 29 0a 0a 00                               |=%d)...         |
0x87f:   00                                                 |.               |
0x880:   50 41 4e 49 43 3a 25 73  3a 25 73 3a 25 64 3a 69   |PANIC:%s:%s:%d:i|   "PANIC:%s:%s:%d:implement this function!\n\n"
0x890:   6d 70 6c 65 6d 65 6e 74  20 74 68 69 73 20 66 75   |mplement this fu|
0x8a0:   6e 63 74 69 6f 6e 21 0a  0a 00                     |nction!...      |
0x8aa:   00 00                                              |..              |
0x8ac:   74 68 72 65 61 64 3a 20  69 6e 74 65 72 6e 61 6c   |thread: internal|   "thread: internal check passed\n"
0x8bc:   20 63 68 65 63 6b 20 70  61 73 73 65 64 0a 00      | check passed.. |
0x8cb:   00                                                 |.               |
0x8cc:   63 75 72 2d 74 68 72 65  61 64 3d 25 64 0a 00      |cur-thread=%d.. |   "cur-thread=%d\n"
0x8db:   00                                                 |.               |
0x8dc:   73 70 3d 25 70 0a 00                               |sp=%p..         |   "sp=%p\n"
0x8e3:   00                                                 |.               |
0x8e4:   73 74 61 63 6b 3d 25 70  0a 00                     |stack=%p..      |   "stack=%p\n"
0x8ee:   00 00                                              |..              |
0x8f0:   73 70 20 3c 20 26 63 75  72 5f 74 68 72 65 61 64   |sp < &cur_thread|   "sp < &cur_thread->stack[THREAD_MAXSTACK]"
0x900:   2d 3e 73 74 61 63 6b 5b  54 48 52 45 41 44 5f 4d   |->stack[THREAD_M|
0x910:   41 58 53 54 41 43 4b 5d  00                        |AXSTACK].       |
0x919:   00 00 00                                           |...             |
0x91c:   73 70 20 3e 3d 20 26 63  75 72 5f 74 68 72 65 61   |sp >= &cur_threa|   "sp >= &cur_thread->stack[0]"
0x92c:   64 2d 3e 73 74 61 63 6b  5b 30 5d 00               |d->stack[0].    |
0x938:   73 70 5b 25 64 5d 3d 72  25 64 3d 25 78 0a 00      |sp[%d]=r%d=%x.. |   "sp[%d]=r%d=%x\n"
0x947:   ??                                                 |?               |
; section: .rodata
0x948:   51 5f 65 6d 70 74 79 00                            |Q_empty.        |   "Q_empty"
0x950:   51 5f 70 6f 70 00                                  |Q_pop.          |   "Q_pop"
0x956:   00 00                                              |..              |
0x958:   74 68 5f 61 6c 6c 6f 63  00                        |th_alloc.       |   "th_alloc"
0x961:   00 00 00                                           |...             |
0x964:   72 70 69 5f 65 78 69 74  00                        |rpi_exit.       |   "rpi_exit"
0x96d:   00 00 00                                           |...             |
0x970:   72 70 69 5f 69 6e 74 65  72 6e 61 6c 5f 63 68 65   |rpi_internal_che|   "rpi_internal_check"
0x980:   63 6b 00                                           |ck.             |
0x983:   00                                                 |.               |
0x984:   72 70 69 5f 73 74 61 63  6b 5f 63 68 65 63 6b 00   |rpi_stack_check.|   "rpi_stack_check"
0x994:   72 70 69 5f 70 72 69 6e  74 5f 72 65 67 73 00      |rpi_print_regs. |   "rpi_print_regs"
0x9a3:   00                                                 |.               |
0x9a4:   72 70 69 5f 65 78 61 63  74 5f 73 6c 65 65 70 00   |rpi_exact_sleep.|   "rpi_exact_sleep"
0x9b4:   00                                                 |.               |
; section: .EXTERN
0x9b4:   00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00   |................|
0x9c4:   00 00 00 00 00 00 00 00  ??                        |........?       |
